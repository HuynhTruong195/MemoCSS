Có 3 cách để nhúng mã CSS vào trong một tài liệu HTML, bao gồm :

(Khai báo trực tiếp ở thẻ HTML (Inline style sheet)

(Khai báo trong thẻ <style> của tài liệu HTML (Internal style sheet)
    Thông thường, thẻ <style> được đặt bên trong thẻ <head>, nhưng đó không phải là bắt buộc

(Khai báo trong file .css riêng biệt (External style sheet)
Chúng ta tạo một file có đuôi là .css, chẳng hạn là style.css. Trong file này chúng ta khai báo tất cả các thuộc tính CSS mong muốn. Sau đó, chúng ta nhúng file .css này vào trong tài liệu HTML bằng cách sử dụng thẻ <link>.
CThẻ <link> được đặt ở trong thẻ <head> của tài liệu HTML.

   1.  VD: <h1 style="color: gold; background: crimson; margin-left: 30px;">Lập trình không khó.</h1>
     2. vd: <html lang="en">
            <head>
            <meta charset="UTF-8">
            <title>Title</title>
            <style>
                body {
                    background: crimson;
                }

                h1 {
                    color: gold;
                    margin-left: 30px;
                }
            </style>
            </head>
            <body>
            <h1>Lập trình không khó.</h1>
            </body>
            </html>
         3. vd: <!DOCTYPE html>
                <html lang="en">
                <head>
                <meta charset="UTF-8">
                <title>Title</title>
                <link rel="stylesheet" type="text/css" href="style.css">
                </head>
                <body>
                <h1>Lập trình không khó.</h1>
                </body>
                </html>

(thuộc tính color
Mục đích: Được sử dụng để thay đổi màu chữ (text color) của các phần tử HTML.
     - Tên màu: Sử dụng các từ khóa màu như red, blue, green, black, v.v.
      p {
        color: Blue;
      }
     - Mã màu HEX: Một chuỗi ký tự bắt đầu bằng #, theo sau là 3 hoặc 6 ký tự đại diện cho màu.
      h1 {
        color: #ff5733
      }
     - RGB: Sử dụng định dạng rgb(red, green, blue) với giá trị từ 0 đến 255.
     div {
        color: rgb(255, 0, 0); /màu đỏ/
    }
    - RGBA: Giống như RGB nhưng thêm giá trị độ trong suốt (alpha) từ 0 đến 1
        span {
            color: rgba(0, 0, 255, 0.5) /màu xanh dương, trong suốt 50%/
        }
    - HSL và HSLA: Sử dụng định dạng hsl(hue, saturation, lightness) hoặc hsla(hue, saturation, lightness, alpha)
        a {
            color: hsl(200, 100%, 50%) /màu xanh dương tưới sáng/
        }
(thuộc tính background-color: Tương tự như color, bạn có thể sử dụng các định dạng như tên màu, mã HEX, RGB, RGBA, HSL, hoặc HSLA.
        div {
            background-color: lightblue;
        }
(Có 3 cách thường được dùng để quy định màu sắc trong trang web:

    Sử dụng tên của màu. Chẳng hạn là "red" (đỏ) hoặc "green" (xanh lá cây)

    Sử dụng giá trị RGB ( Red Green Blue). Chẳng hạn là "rgb(255, 0, 0).
                                giá trị màu từ 0-255. 

    Sử dụng giá trị HEX. Chẳng hạn là "#ff0000".
    Mã HEX

        Biểu diễn khác của màu dựa trên các giá trị RGB. Tuy nhiên, thay vì biểu diễn bằng cú pháp rgb(value, value, value) thì được biểu diễn dưới dạng 6 chữ số hệ thập lục phân.

 (Bộ thuộc tính về text (Text properties)
        1.Thuộc tính text-align: Căn chỉnh văn bản theo chiều ngang.
                    left: Căn trái (mặc định).
                    right: Căn phải.
                    center: Căn giữa.
                    justify: Căn đều hai bên.

                vd: h1 {
                    text-align: center;
                }

          2. Thuộc tính text-decoration: Thêm hoặc loại bỏ gạch chân, gạch ngang, hoặc  gạch trên văn bản.      

                vd: a {
                    text-decoration: underline; /* gạch chân liên kết url*/
                }

            3. Thuộc tính font-weight: xác định độ dày (đậm hoặc nhạt)
                Từ khóa:
                    normal: Độ dày mặc định của chữ (400).
                    bold: Văn bản in đậm (700).
                    lighter: Văn bản nhẹ hơn so với phần tử cha.
                    bolder: Văn bản đậm hơn so với phần tử cha.
                Giá trị số:  
                    100: Mỏng nhất (Thin).
                    200: Nhẹ hơn (Extra Light).
                    300: Nhẹ (Light).
                    400: Mặc định (Normal).
                    500: Trung bình (Medium).
                    600: Hơi đậm (Semi Bold).
                    700: Đậm (Bold).
                    800: Rất đậm (Extra Bold).
                    900: Siêu đậm (Black).

                    VD: h1 {
                        font-weight: bold; /* văn bản đậm*/
                    }
                        p {
                            font-weight: 700; /* Đậm*/
                        }
            4. Thuộc tính line-height: Điều chỉnh khoảng cách giữa các dòng trong đoạn văn.
                Giá trị: Có thể là một giá trị cố định (px), tỷ lệ (em), hoặc giá trị số (1.5).
                VD: 
                        p {
                            line-height: 1.8; /* Tăng khoảng cách giữa các dòng*/
                        }

            5.  Thuộc tính letter-spacing: Mục đích: Điều chỉnh khoảng cách giữa các ký tự trong văn bản.
                Giá trị: Có thể là một giá trị dương (giãn rộng) hoặc âm (thu hẹp).

                h3 {
                    letter-spacing: 2px;
                }
   (font-family	Xác định kiểu chữ (Arial, Times New Roman, sans-serif...)
   font-size	Xác định kích thước chữ đơn vị px vd 100px;
   font-weight	Xác định độ đậm của chữ (normal, bold, 100 - 900)
   font-style	Xác định kiểu chữ (normal, italic, oblique)
   font-variant	Chuyển chữ sang dạng chữ nhỏ hơn (small-caps)             

                Font Family  Nếu tên của một phông chữ nhiều hơn một từ, nó phải đặt trong dấu nháy kép, ví dụ: "Times New Roman".
                Nếu chỉ định nhiều hơn một phông chữ, thì dùng dấu phẩy ( , ) để ngăn cách giữa chúng:

    (margin	Tạo khoảng cách bên ngoài viền của phần tử (ra khỏi phần tử khác)	
        Khoảng cách giữa các phần tử
    (padding	Tạo khoảng cách bên trong viền của phần tử (từ nội dung đến viền)
        Khoảng cách giữa nội dung và viền
                vd: 
                Dùng 1 giá trị:
                margin: 20px;  /* Tạo khoảng cách 20px cho tất cả các cạnh */
                 padding: 10px; /* Tạo khoảng cách 10px giữa nội dung và viền */

                 Dùng 2 giá trị (trên-dưới / trái-phải):
                 margin: 10px 20px;  /* Trên và dưới: 10px, Trái và phải: 20px */
                padding: 5px 15px;  /* Trên và dưới: 5px, Trái và phải: 15px */

                Dùng 4 giá trị (trên - phải - dưới - trái, theo chiều kim đồng hồ):
                margin: 10px 15px 20px 25px; 
                /* Trên: 10px, Phải: 15px, Dưới: 20px, Trái: 25px */

                ùng thuộc tính riêng cho từng cạnh:
                    margin-top: 10px;
                    margin-right: 15px;
                    margin-bottom: 20px;
                    margin-left: 25px;

( Id selector và Class selector
                ID: được sử dụng để áp dụng style cho một phần tử cụ thể, ID trong HTML phải duy nhất trong toàn bộ tài liệu
                + Dấu # trước tên ID.
                        vd: id="header"--> #header { }
                Class: Class Selector được sử dụng để áp dụng style cho một hoặc nhiều phần tử. Một class có thể được sử dụng trên nhiều phần tử

                + Dấu . trước tên class
                        vd: Class="header"--> .header { }

(1. Descendant Selector: Chọn tất cả các phần tử con bên trong một phần tử cha, bất kể cấp độ nào.
Cú pháp: 
        parent descendant {
            /* CSS áp dụng cho tất cả phần tử "descendant" bên trong "parent" */
        }
        
        vd:  
            - ở CSS 
        .container p {
            color: blue;
        }

          -  ở html 
            <div class="container">
            <p>Đây là đoạn văn trong .container</p>
            <div>
(2. Adjacent selector:   chọn phần tử B mà đứng sau phần tử A
        vd: ở HTML 
            <h1> Tiêu đề chính </h1>
            <p> Đây là đoạn văn đầu tiên.</p>
            <p>Đây là đoạn văn thứ hai.</p>
        ở CSS
            h1 + p {
                color: blue;
            }
    Kết quả : 
    <p>Đây là đoạn văn đầu tiên.</p> sẽ có màu xanh.
    <p>Đây là đoạn văn thứ hai.</p> không bị ảnh hưởng.

(Attribute Selector: chọn ra phần tử được gọi để gán hiệu ứng

            vd: ở HTML 
            <input type="text" />
            <input type="email" />
            <input type="text"  />

            ở css
            input[type="text"] {
                background-color: red;
            }
            kết quả: 2 dong input text có màu nền là đỏ

(1. Pseudo-class: Áp dụng style dựa trên trạng thái của phần tử.
        Ví dụ:
       ở  css:
        a:hover {
            color: red;
        }
        ở html: 
        <a href="http://...">Di chuột vào tôi!</a>
        🔹 Kết quả: Khi di chuột vào đường link <a>, chữ sẽ chuyển sang màu đỏ.

        Một số pseudo-class phổ biến
        Pseudo-class	Chức năng
        :hover	Khi di chuột vào phần tử. Thường được dùng cho thẻ a
        :focus	Khi phần tử được focus (nhập vào input)
        :nth-child(n)	Chọn phần tử con thứ n
        :first-child	Chọn phần tử con đầu tiên
        :last-child	Chọn phần tử con cuối cùng
        :checked	Chọn checkbox đã được tích
        :not(selector) Chọn các phần tử không khớp với selector.

(2. Pseudo-element: Chọn và định dạng một phần cụ thể của phần tử.
        cú pháp: selector::pseudo-element {
            /* CSS áp dụng cho một phần của phần tử */
        }

        vd: ở css
        p::first-letter {
            font-size: 30px;
            color: blue;
        }
            ở html
            <p>Đây là một đoạn văn.</p>
     🔹 Kết quả: Chữ cái đầu tiên của <p> sẽ có cỡ chữ to và màu xanh.
        Một số pseudo-element phổ biến
        Pseudo-element	Chức năng
        ::first-letter	Chọn chữ cái đầu tiên
        ::first-line	Chọn dòng đầu tiên
        ::before	Thêm nội dung trước phần tử
        ::after	Thêm nội dung sau phần tử
        ::selection	Định dạng nội dung khi được bôi đen

( list-style-type: none; bỏ các ký hiệu đánh thứ tự phía trước khi dùng ul li
  .menu ul {
            list-style-type: none;
(inputmode="numeric": Hiển thị bàn phím số trên thiết bị di động



Box model là gì
CSS Box Model là cấu trúc cơ bản để trình bày và định dạng các phần tử HTML. Mỗi phần tử được xem như một hộp bao gồm các thành phần sau:

Content: Nội dung chính của phần tử (văn bản, hình ảnh, v.v.).
Padding: Khoảng cách giữa nội dung và viền (border).
Border: Đường viền bao quanh phần tử.
    Margin: Khoảng cách giữa phần tử và các phần tử khác.
    (margin: đẩy khoảng cách từ phần từ bên ngoài ra. Khoảng cách từ khối này tới khối khác. Đẩy những phần tử khác ra xa hơn 
        CÓ THỂ SỬ DỤNG SỐ ÂM
    (padding: đẩy phần tử bên trong ra. khoảng cách từ phần tử bên trong đến khối. Làm cho phạm vi của khối lớn hơn
        KHÔNG THỂ SỬ DỤNG SỐ ÂM

 CSS border là một thuộc tính dùng để tạo đường viền bao quanh các phần tử
  vd: div {                     
    border: 2px solid red; 
    }       
        2px là độ dày của đường viền.
        solid là kiểu đường viền.
        red là màu đường viền.

    

Các thuộc tính chi tiết của border
border-width
Xác định độ dày của đường viền.

Giá trị có thể là:
Từ khóa: thin, medium, thick.
Hoặc đơn vị cụ thể: px, em, %, v.v
 vd: div {
    border-width: 5px;
 }

 border-style: Xác định kiểu dáng của đường viền.

    Giá trị phổ biến:
    
    none: Không có đường viền.
    solid: Đường viền liền mạch.
    dotted: Đường viền chấm.
    dashed: Đường viền gạch ngang.
    double: Đường viền kép.
    groove: Đường viền lõm vào.
    ridge: Đường viền nổi lên.
    inset: Đường viền bên trong.
    outset: Đường viền bên ngoài.
    Ví dụ: div {
        border-style: dashed;
    }

 border-color
    Xác định màu của đường viền.
    
    Giá trị có thể là:
    Tên màu: red, blue, green.
    Mã màu: #FF0000, rgb(255, 0, 0).
    Ví dụ:
            div {
                border-color: blue;
            }


Đường viền từng cạnh
Bạn có thể đặt đường viền cho từng cạnh riêng biệt:

    border-top
    border-right
    border-bottom
    border-left
    vd: div {
        border-top: 2px solid red;
        border-right: 2px solid blue;
    }

Bo tròn đường viền
Thuộc tính border-radius được dùng để tạo góc bo tròn cho đường viền.

Ví dụ: div {
    border: 2px solid black;
    border-radius: 10px;
}
Bạn cũng có thể bo tròn chỉ một góc:
        div {
            border-top-left-radius: 20ox;
        }

(Box model - display properties
    element: Tên phần tử HTML (như div, p, span, v.v.).
    value: Giá trị của thuộc tính display
Block
    Hiển thị phần tử dưới dạng khối (block-level element).
    Phần tử sẽ chiếm toàn bộ chiều rộng của dòng, đẩy phần tử khác xuống dòng tiếp theo.
        <div style="display: block"> Black Element </div>
        <p style="display: block"> Paragrap</p>
inline
    Hiển thị phần tử dưới dạng nội tuyến (inline-level element).
    Phần tử không chiếm toàn bộ chiều rộng dòng, có thể đứng cạnh các phần tử khác.
    Ví dụ: <span style="display: inline;"> Inline Element </span>

inline-block
    Kết hợp giữa block và inline.
    Phần tử xếp trên một dòng (như inline), nhưng có thể chỉnh kích thước (như block).
    Ví dụ: 
    <div style="display: inline-block; width: 100px height: 50px"> Inline Block</div>

none
    Ẩn phần tử khỏi trang, không hiển thị và không chiếm không gian trong bố cục.
    Khác với visibility: hidden (ẩn nhưng vẫn chiếm không gian).
    Ví dụ: <p style="display: none;"> This text is hidden </p>


(Opacity - Alpha channel: 
    Opacity : điều chỉnh độ trong suốt của phần tử trong html. có giá trị từ 0 đến 1
    Hiệu ứng:
Opacity ảnh hưởng đến toàn bộ thành phần, bao gồm cả nội dung con. Ví dụ, nếu bạn đặt opacity: 0.5 cho một div, tất cả văn bản hoặc hình ảnh bên trong div cũng sẽ bị
        vd: <div style="backround-color: red; opacity: 0,5"> </div>

Alpha channel: thường được sử dụng khi làm việc với màu sắc trong CSS thông qua định dạng màu hỗ trợ kênh alpha, chẳng hạn:
    rgba (Red-Green-Blue-Alpha): Hỗ trợ kênh alpha để xác định mức độ trong suốt.
    hsla (Hue-Saturation-Lightness-Alpha): Tương tự, hỗ trợ kênh alpha.
    Giá trị của alpha trong rgba hoặc hsla nằm trong khoảng từ 0 đến 1:
    alpha = 1 → Màu hoàn toàn không trong suốt.
    alpha = 0 → Màu hoàn toàn trong suốt
    *Lưu ý: Alpha channel chỉ áp dụng cho màu nền hoặc màu đường viền, không ảnh hưởng đến các phần tử con. ngược lại opacity ảnh hưởng toàn bộ thành phần

        vd: <div style="backround-color: red; opacity: 0.5;"> </div>
                        Nội dung bị mở toàn bộ
            <div style="backround-color: rgba(255, 0, 0, 0.5)" </div>
                        Nội dung rõ ràng chỉ màu nền mờ



(Position properties

1. static (mặc định)
    Đặc điểm:
    Đây là giá trị mặc định của tất cả các phần tử HTML.
    Phần tử được đặt theo thứ tự tài liệu thông thường (flow document).
    Không thể sử dụng các thuộc tính định vị như top, right, bottom, hoặc left.
        <div style="position: static;"> đây là một phần tử với vị trí mặc định. </div>

2. relative (tương đối)
    Đặc điểm:
    Phần tử vẫn giữ vị trí ban đầu trong tài liệu.
    Các thuộc tính định vị (top, right, bottom, left) sẽ điều chỉnh vị trí của phần tử dựa trên vị trí ban đầu.
    Không ảnh hưởng đến vị trí của các phần tử khác.
    Ví dụ:
     <div style="position: relative; top: 20px; left: 30px;"> đây là một phần tử tương đối đc dịch chuyển 20px xuống cách top và 30px sang các lề trái.

 3. absolute (tuyệt đối)
    Đặc điểm:
    Phần tử được định vị tương đối với phần tử cha gần nhất có thuộc tính position khác static.
    Nếu không có phần tử tổ tiên nào có position khác static, phần tử sẽ được định vị tương đối với viewport (trang gốc).
    Các thuộc tính top, right, bottom, left xác định vị trí chính xác của phần
    vd:  <div style="position: relative; height: 200px; width: 300px; backround: red;"> 
    Phần tử chứa <div style="position: absolute; top: 10px; left: 10px backround: coral;"> Phần tử con tuyệt đối </div> 
            </div>

4. fixed (Cố định)
    Đặc điểm:
    Phần tử được định vị tương đối với viewport và không thay đổi vị trí khi cuộn trang.
    Các thuộc tính top, right, bottom, left xác định vị trí cố định trên viewport.
        FIXED THƯỜNG ĐƯỢC DÙNG ĐỂ LÀM THANH ĐIỀU HƯỚNG HOẶC NÚT " LÊN ĐẦU TRANG"

        ✅ Tổng kết ngắn gọn
        Thuộc tính	    Ghi nhớ
        static	        Vị trí mặc định (không thể định dạng top,left...)
        relative	    Dịch nhẹ cách vị trí gốc (CÓ thể định dạng top,left...)
                    chỉ nên use 2 phần tử top-left;right-bot... để căn chỉnh theo chuẩn Ngang và Dọc
        absolute	    dịch ra Vị trí tương đối theo trình duyệt hoặc theo thẻ Cha. 
                    khi đó thẻ cha phải thêm mốc position: relative cho thẻ cha
        fixed	        Ghim trên màn hình. cuộn thanh kéo thì fixed vẫn nằm yên k đổi
        sticky	        Dính khi cuộn tới. tương tự như fixed nhưng stiky nó sẽ luôn nằm ở đầu trang khi kéo xuống dưới



 👉 Transition: tạo hiệu ứng chuyển đổi
transition trong CSS giúp tạo hiệu ứng chuyển động mượt mà khi giá trị CSS thay đổi.

👉 Không còn thay đổi đột ngột, mà sẽ chuyển đổi từ từ (ví dụ: đổi màu, đổi kích thước, xoay nhẹ...).

cú pháp: 
selector {
    transition: property duration easing delay;
  }
  property: Thuộc tính cần tạo hiệu ứng (ví dụ: background-color, transform, opacity, ...)
  duration: Thời gian hiệu ứng (ví dụ: 0.5s, 1s)
  easing: Kiểu chuyển động (mượt, đều, tăng nhanh rồi chậm lại, ...)
  delay: Trễ bao lâu trước khi hiệu ứng bắt đầu

🧩 3. Các thuộc tính Transition hay dùng
  Thuộc tính	        Mô tả dễ hiểu
  background-color  	Đổi màu nền mượt
  color	                 Đổi màu chữ mượt
  width,                 height	Thay đổi kích thước mềm mại
  transform         	 Xoay, phóng to, thu nhỏ mượt
  opacity	             Làm mờ, hiện mượt
  box-shadow	         Tạo đổ bóng mượt
  
    vd:
     <style>
        .box {
        width: 200px;
        height: 100px;
        background-color: lightblue;
        transition: background-color 0.5s ease;
        }

        .box:hover {
        background-color: tomato;
        }
        </style>
        </head>
        <body>
        <div class="box">Di chuột vào đây!</div>

    vd2: phóng to khi rê chuột vào
        .box {
            transition: transform 0.3s ease-in-out;
          }
          
          .box:hover {
            transform: scale(1.2); }  Phóng to 120% * 
            
Timing-function
    Xác định cách tốc độ thay đổi trong suốt quá trình chuyển đổi.
    Các giá trị phổ biến:
    linear: Tốc độ không đổi.
    ease: Mặc định, thay đổi mượt mà.
    ease-in: Tăng tốc dần.
    ease-out: Giảm tốc dần.
    ease-in-out: Tăng tốc rồi giảm tốc.
    cubic-bezier(n, n, n, n): Tùy chỉnh đường cong chuyển đổi.

LƯU Ý:  Không phải tất cả các thuộc tính CSS đều hỗ trợ transition. Ví dụ, thuộc tính display không thể chuyển đổi.
Hiệu năng: Quá nhiều transition hoặc transition phức tạp có thể ảnh hưởng đến hiệu suất, đặc biệt trên thiết bị di động.
Kết hợp với pseudo-classes: Transition thường được sử dụng với :hover, :focus, hoặc :active để tạo các hiệu ứng tương tác.


🌀 transform
transform là thuộc tính CSS dùng để biến đổi hình dạng hoặc vị trí của một phần tử HTML, ví dụ như:

    ✨ Xoay (rotate)  để thay trục để xoay thì dùng tranform-origin: bottom left;
        có thể xoay theo trục X hoặc Y, rotateX (90deg) xoay theo trục X 90 độ 
            
    📏 Phóng to / thu nhỏ (scale) tương tự rotate
   
    🔄 Dịch chuyển (translate)
    🔁 Nghiêng (skew)

 🧠 Cú pháp cơ bản:
  
    selector {
      transform: loại_biến_đổi(giá_trị);
    }

    🔧 Các loại transform thường dùng:
Loại	             Cú pháp	              Ý nghĩa
translate(x, y)	      translate(50px, 20px)	        Di chuyển phần tử (x: ngang, y: dọc)
scale(x)	            scale(1.2)	                  Phóng to (1.2 lần) hoặc thu nhỏ (0.8 lần)
rotate(deg)	            rotate(45deg)	              Xoay phần tử theo góc (ví dụ: 45 độ)
skew(x, y)	            skew(10deg, 5deg)	        Nghiêng phần tử
matrix(...)         	phức tạp hơn	            Kết hợp nhiều hiệu ứng (ít dùng cho người mới)

vd: 
🔍 Phóng to khi hover
.box {
    transition: transform 0.3s;
  }
  
  .box:hover {
    transform: scale(1.2);          📌 Khi di chuột vào .box, phần tử sẽ phóng to 120%
  }

  🔁 Xoay phần tử
  .box {
    transform: rotate(45deg);       📌 Phần tử bị xoay 45 độ theo chiều kim đồng hồ
  }

  📐 Nghiêng phần tử
  .box {
    transform: skew(20deg, 10deg);    📌 Phần tử bị nghiêng theo trục X 20 độ, trục Y 10 độ
  } 

  🧩 Kết hợp nhiều transform
  .box {
    transform: translate(20px, 0) scale(1.1) rotate(10deg);
  }
  📌 Di chuyển sang phải, phóng to và xoay nhẹ – rất mượt nếu dùng với transition.

